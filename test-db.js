const { initDatabase, sequelize, Booking } = require('./src/database/init');

async function testDatabase() {
    console.log('üîç Verificando estado de la base de datos...');
    
    try {
        // Probar conexi√≥n
        await sequelize.authenticate();
        console.log('‚úÖ Conexi√≥n a MySQL establecida correctamente');
        
        // Verificar tablas
        const queryInterface = sequelize.getQueryInterface();
        const tables = await queryInterface.showAllTables();
        console.log('üìã Tablas en la base de datos:', tables);
        
        // Si la tabla bookings existe, mostrar estad√≠sticas
        if (tables.includes('bookings')) {
            console.log('\nüìä Estad√≠sticas de la tabla bookings:');
            
            // Contar total de registros
            const totalCount = await Booking.count();
            console.log(`   ‚Ä¢ Total de reservas: ${totalCount}`);
            
            // Contar por estado
            const confirmedCount = await Booking.count({ where: { status: 'confirmed' } });
            const cancelledCount = await Booking.count({ where: { status: 'cancelled' } });
            console.log(`   ‚Ä¢ Reservas confirmadas: ${confirmedCount}`);
            console.log(`   ‚Ä¢ Reservas canceladas: ${cancelledCount}`);
            
            // Mostrar √∫ltimas 5 reservas
            const recentBookings = await Booking.findAll({
                order: [['createdAt', 'DESC']],
                limit: 5,
                attributes: ['id', 'clientName', 'clientPhone', 'date', 'status', 'createdAt']
            });
            
            if (recentBookings.length > 0) {
                console.log('\nüìã √öltimas 5 reservas:');
                recentBookings.forEach((booking, index) => {
                    const date = new Date(booking.date);
                    const createdAt = new Date(booking.createdAt);
                    console.log(`   ${index + 1}. ID: ${booking.id}`);
                    console.log(`      Cliente: ${booking.clientName}`);
                    console.log(`      Tel√©fono: ${booking.clientPhone || 'No especificado'}`);
                    console.log(`      Fecha reserva: ${date.toLocaleDateString('es-ES')} ${date.toLocaleTimeString('es-ES')}`);
                    console.log(`      Estado: ${booking.status}`);
                    console.log(`      Creada: ${createdAt.toLocaleDateString('es-ES')} ${createdAt.toLocaleTimeString('es-ES')}`);
                    console.log('   ----');
                });
            } else {
                console.log('   üìù No hay reservas registradas a√∫n');
            }
        } else {
            console.log('‚ùå La tabla bookings no existe. La base de datos no est√° inicializada.');
        }
        
    } catch (error) {
        console.error('‚ùå Error al verificar la base de datos:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° Posibles soluciones:');
            console.log('   ‚Ä¢ Verificar que MySQL est√© ejecut√°ndose');
            console.log('   ‚Ä¢ Verificar la configuraci√≥n en el archivo .env');
            console.log('   ‚Ä¢ Verificar que la base de datos "car_wash_db" exista');
        }
    } finally {
        await sequelize.close();
        console.log('\nüîö Verificaci√≥n completada');
    }
}

testDatabase();
