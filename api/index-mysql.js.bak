/**
 * üöÄ API PRINCIPAL PARA VERCEL - CAR WASH TYPESHI
 * Usa base de datos en memoria (no requiere MySQL)
 * URL: https://car-wash-typeshi.vercel.app/api/
 */

const db = require('../database-memory');

// Funci√≥n principal del handler
module.exports = async (req, res) => {
    console.log('üöÄ [API] Procesando:', req.method, req.url);
    
    try {
        // Configurar CORS
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Request-ID');
        res.setHeader('Content-Type', 'application/json');
        
        // Manejar preflight requests
        if (req.method === 'OPTIONS') {
            res.status(200).end();
            return;
        }
        
        const { url, method, query } = req;
        const path = url.split('?')[0];
        
        // Endpoint: Estado del sistema
        if (path.includes('/status') || query?.endpoint?.includes('status')) {
            const services = db.getServices();
            res.status(200).json({
                status: 'SUCCESS',
                message: 'Car Wash Typeshi - Sistema funcionando correctamente',
                timestamp: new Date().toISOString(),
                environment: 'production',
                version: '1.0.0',
                database: 'Memoria (sin MySQL)',
                services: services.length
            });
            return;
        }
        
        // Endpoint: Servicios disponibles
        if (path.includes('/services') || query?.endpoint?.includes('services')) {
            const services = db.getServices();
            res.status(200).json({
                status: 'SUCCESS',
                message: 'Servicios obtenidos exitosamente',
                data: {
                    services: services
                }
            });
            return;
        }
        
        // Endpoint: Horarios disponibles
        if (path.includes('/available-slots') || query?.endpoint?.includes('available-slots')) {
            const date = query?.date || new URLSearchParams(url.split('?')[1] || '').get('date');
            
            if (!date) {
                res.status(400).json({
                    status: 'ERROR',
                    message: 'Fecha requerida (formato: YYYY-MM-DD)'
                });
                return;
            }
            
            const availableSlots = db.getAvailableSlots(date);
            
            res.status(200).json({
                status: 'SUCCESS',
                message: 'Horarios obtenidos exitosamente',
                data: {
                    date: date,
                    availableSlots: availableSlots,
                    totalSlots: availableSlots.length,
                    availableCount: availableSlots.filter(s => s.available).length
                }
            });
            return;
        }
        
        // Endpoint: Reservas
        if (path.includes('/bookings') || query?.endpoint?.includes('bookings')) {
            if (method === 'GET') {
                const bookings = db.getAllBookings();
                res.status(200).json({
                    status: 'SUCCESS',
                    message: 'Reservas obtenidas exitosamente',
                    data: {
                        bookings: bookings
                    }
                });
                return;
            }
            
            if (method === 'POST') {
                let body = '';
                
                req.on('data', chunk => {
                    body += chunk.toString();
                });
                
                req.on('end', async () => {
                    try {
                        const bookingData = JSON.parse(body);
                        const newBooking = db.createBooking(bookingData);
                        
                        res.status(201).json({
                            status: 'SUCCESS',
                            message: 'Reserva creada exitosamente',
                            data: {
                                booking: newBooking
                            }
                        });
                    } catch (error) {
                        res.status(400).json({
                            status: 'ERROR',
                            message: error.message
                        });
                    }
                });
                return;
            }
        }
        
        // Endpoint no encontrado
        res.status(404).json({
            status: 'ERROR',
            message: 'Endpoint no encontrado',
            availableEndpoints: [
                'GET /api/status',
                'GET /api/services',
                'GET /api/available-slots?date=YYYY-MM-DD',
                'GET /api/bookings',
                'POST /api/bookings'
            ]
        });
        
    } catch (error) {
        console.error('‚ùå [API] Error:', error);
        res.status(500).json({
            status: 'ERROR',
            message: 'Error interno del servidor',
            error: error.message
        });
    }
};
                                message: 'El horario seleccionado no est√° disponible'
                            });
                            return;
                        }
                        
                        // Crear o encontrar usuario
                        let userId = null;
                        const [existingUser] = await connection.execute(
                            'SELECT id FROM users WHERE email = ?',
                            [email]
                        );
                        
                        if (existingUser.length > 0) {
                            userId = existingUser[0].id;
                        } else {
                            const [userResult] = await connection.execute(
                                'INSERT INTO users (name, email, phone) VALUES (?, ?, ?)',
                                [name, email, phone]
                            );
                            userId = userResult.insertId;
                        }
                        
                        // Extraer horas del time_slot
                        const [startTime, endTime] = timeSlot.split('-');
                        
                        // Crear reserva
                        const [result] = await connection.execute(`
                            INSERT INTO bookings (
                                user_id, service_id, booking_date, time_slot, start_time, end_time,
                                customer_name, customer_email, customer_phone, total_price, status
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'confirmed')
                        `, [
                            userId, service.id, date, timeSlot, startTime + ':00', endTime + ':00',
                            name, email, phone, service.price
                        ]);
                        
                        const newBooking = {
                            id: result.insertId,
                            user_id: userId,
                            service_id: service.id,
                            booking_date: date,
                            time_slot: timeSlot,
                            customer_name: name,
                            customer_email: email,
                            customer_phone: phone,
                            total_price: service.price,
                            status: 'confirmed',
                            service: service
                        };
                        
                        res.status(201).json({
                            status: 'SUCCESS',
                            message: 'Reserva creada exitosamente',
                            data: {
                                booking: newBooking
                            }
                        });
                        
                    } catch (parseError) {
                        res.status(400).json({
                            status: 'ERROR',
                            message: 'Error al procesar datos de la reserva',
                            error: parseError.message
                        });
                    }
                });
                
                return;
            }
        }
        
        // Endpoint no encontrado
        res.status(404).json({
            status: 'ERROR',
            message: 'Endpoint no encontrado',
            path: path,
            availableEndpoints: [
                '/api/status',
                '/api/services',
                '/api/available-slots?date=YYYY-MM-DD',
                '/api/bookings'
            ]
        });
        
    } catch (error) {
        console.error('‚ùå Error en API:', error);
        
        res.status(500).json({
            status: 'ERROR',
            message: 'Error interno del servidor',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
};
